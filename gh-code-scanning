#!/usr/bin/env python3

import argparse
import json
import os
import random
import shutil
import string
import subprocess
import sys
import tempfile
import collections

def json_multiloads(json_string, spool=[]):
    """
    json_multiloads decodes multiple JSON documents that have been concatenated together, as `gh api --paginate` does.
    See: https://github.com/cli/cli/issues/1268.
    """
    try:
        spool += json.loads(json_string)
    except json.decoder.JSONDecodeError as e:
        spool += json.loads(json_string[:e.pos])
        json_multiloads(json_string[e.pos:], spool)
    return spool

class GithubRepository(object):
    def __init__(self, nwo, gh_exe, git_exe):
        self.gh_exe = gh_exe
        self.git_exe = git_exe
        self._default_branch = None
        try:
            self.owner, self.repository = nwo.split('/')
        except ValueError:
            sys.stderr.write('error: argument "%s" must be in the "name with owner" format (owner/repository).\n' % nwo)
            sys.exit(1)

    @classmethod
    def with_kwargs(cls, **kwargs):
        """
        This classmethod returns a closure, which returns a class instance of GithubRepository.
        By returning a closure, I can pass other arguments, such as `gh_exe` separately
        and partially apply them to the constructor. This is very handy for passing this class to
        libraries like ArgParse that will instantiate new instances of this class with only one argument.
        """
        return lambda nwo: cls(nwo, **kwargs)

    def __str__(self):
        return self.owner + '/' + self.repository

    @property
    def default_branch(self):
        if self._default_branch is not None:
            return self._default_branch

        try:
            cmd = subprocess.run([self.gh_exe, 'api', 'repos/%s' % self], capture_output=True, check=True)
        except subprocess.CalledProcessError as e:
            message = e.stderr.decode('utf-8').strip()
            sys.stderr.write(message)
            sys.exit(1)

        # Let's memoize this, because the default branch is unlikely to change while executing.
        self._default_branch = json.loads(cmd.stdout)['default_branch']
        return self._default_branch

    @property
    def languages(self):
        try:
            cmd = subprocess.run([self.gh_exe, 'api', 'repos/%s/languages' % self], capture_output=True, check=True)
        except subprocess.CalledProcessError as e:
            message = e.stderr.decode('utf-8').strip()
            sys.stderr.write(message)
            sys.exit(1)

        return json.loads(cmd.stdout)

    def analyses(self, ref=None):
        command = [ self.gh_exe, 'api', 'repos/%s/code-scanning/analyses' % self, '--paginate', '--method=GET' ]

        if ref is not None:
            command.append('--raw-field=ref=%s' % ref)

        try:
            gh_process = subprocess.run(command, capture_output=True, check=True)
        except subprocess.CalledProcessError as e:
            message = e.stderr.decode('utf-8').strip()
            sys.stderr.write(message)
            sys.exit(1)

        for analysis_json_obj in json_multiloads(gh_process.stdout):
            yield CodeScanningAnalysis.from_api(self, analysis_json_obj, self.gh_exe)

    def alerts(self):
        try:
            cmd = subprocess.run([self.gh_exe, 'api', '--paginate', 'repos/%s/code-scanning/alerts' % self], capture_output=True, check=True)
        except subprocess.CalledProcessError as e:
            message = e.stderr.decode('utf-8').strip()
            sys.stderr.write(message)
            sys.exit(1)

        for alert_object in json_multiloads(cmd.stdout):
            yield CodeScanningAlert(alert_object)

class CodeScanningAnalysis(object):
    def __init__(self, repository, analysis_id, gh_exe, ref=None, commit_sha=None, analysis_key=None, environment=None, category=None,
                 created_at=None, results_count=None, rules_count=None, sarif_id=None, deletable=False):
        self.repository    = repository
        self.id            = analysis_id
        self.gh_exe        = gh_exe
        self.ref           = ref
        self.commit_sha    = commit_sha
        self.analysis_key  = analysis_key
        self.environment   = environment
        self.category      = category
        self.created_at    = created_at
        self.results_count = results_count
        self.rules_count   = rules_count
        self.sarif_id      = sarif_id
        self.deletable     = deletable

    @classmethod
    def from_api(cls, repository, obj, gh_exe):
        return cls(
            repository,
            obj['id'],
            gh_exe,
            ref=obj['ref'],
            commit_sha=obj['commit_sha'],
            analysis_key=obj['analysis_key'],
            environment=obj['environment'],
            category=obj['category'],
            created_at=obj['created_at'],
            results_count=obj['results_count'],
            rules_count=obj['rules_count'],
            sarif_id=obj['sarif_id'],
            deletable=obj['deletable'],
        )

    def is_deletable(self):
        return self.deletable

    def delete(self):
        """
        Delete this Code Scanning analysis from the repository. This function returns a CodeScanningAnalysis
        object of the next analysis that can be deletd, if one exists.
        """
        try:
            cmd = subprocess.run(
                [
                    self.gh_exe, 'api', '--method=DELETE',
                    'repos/%s/code-scanning/analyses/%d?confirm_delete=true' % (self.repository, self.id)
                ],
                capture_output=True,
                check=True,
            )
        except subprocess.CalledProcessError:
            sys.stderr.write('warn: %s: cannot delete analysis %d.\n' % (self.repository, self.id))
            sys.exit(1)

        next_analysis = json.loads(cmd.stdout)
        if next_analysis['next_analysis_url'] is None and next_analysis['confirm_delete_url'] is None:
            return None

        next_analysis_id = int(next_analysis['next_analysis_url'].split('/')[-1])
        return self.__class__(self.repository, next_analysis_id, self.gh_exe, deletable=True)

class CodeScanningAlert(object):
    def __init__(self, obj):
        Rule = collections.namedtuple('Rule', ['name', 'id', 'severity', 'tags'])
        Location = collections.namedtuple('Location', ['path', 'start_line', 'end_line', 'start_column', 'end_column'])

        self.number     = obj['number']
        self.created_at = obj['created_at']
        self.state      = obj['state']
        self.rule       = Rule(obj['rule']['name'], obj['rule']['id'], obj['rule'].get('severity', obj['rule'].get('security_severity_level')), obj['rule']['tags'])
        self.location   = Location(**obj['most_recent_instance']['location'])

def do_enable(args):
    def normalize_lang(lang):
        """
        CodeQL uses certain keywords to identify a language. These keywords are typically
        not the language name itself. So, this function maps the programming-language
        name to the CodeQL language keyword.
        """
        if lang in {'C', 'C++'}:
            return 'cpp'
        if lang == 'Java':
            return 'java'
        if lang == 'C#':
            return 'csharp'
        if lang == 'Go':
            return 'go'
        if lang == 'Python':
            return 'python'
        if lang in {'JavaScript', 'TypeScript'}:
            return 'javascript'
        if lang == 'Ruby':
            return 'ruby'
        return None

    def generate_random_weekly_cron():
        return '{} {} {} {} {}'.format(
            random.randint(0, 59), # minute
            random.randint(0, 23), # hour
            '*',                   # day of month
            '*',                   # month
            random.randint(0, 6)   # day of week
        )

    output = None if args.verbose else subprocess.DEVNULL
    branch_name = 'mario-campos/gh-code-scanning'
    workflow_name = 'codeql-analysis.yml'
    workflow_dstdir = '.github/workflows'
    workflow_srcpath = os.path.join(os.path.dirname(__file__), workflow_name)
    workflow_dstpath = os.path.join(workflow_dstdir, workflow_name)

    with open(workflow_srcpath) as f:
        workflow_template = string.Template(f.read())

    for repo in args.repos:
        os.chdir('/')

        supported_langs = list(filter(None, map(normalize_lang, repo.languages)))
        if len(supported_langs) == 0:
            sys.stderr.write('error: %s: no supported programming languages.\n' % repo)
            continue

        with tempfile.TemporaryDirectory() as temp_dir:
            subprocess.run([args.gh, 'repo', 'clone', str(repo), temp_dir, '--', '--depth=1'], stdout=output, stderr=output)
            
            os.chdir(temp_dir)

            if os.path.exists(workflow_dstpath) and not args.force:
                sys.stderr.write('error: %s: workflow "%s" already exists.\n' % (repo, workflow_name))
                continue
            
            if not args.git_push:
                subprocess.run([args.git, 'checkout', '-b', branch_name], stdout=output, stderr=output)

            workflow_contents = workflow_template.safe_substitute(
                DEFAULT_BRANCH_EXPR=repr(repo.default_branch),
                SCHEDULE_CRON_EXPR=repr(generate_random_weekly_cron()),
                MATRIX_LANGUAGE_EXPR=repr(supported_langs)
            )

            os.makedirs(workflow_dstdir, exist_ok=True)
            with open(workflow_dstpath, 'w') as f:
                f.write(workflow_contents)
            
            subprocess.run([args.git, 'add', '--all'], stdout=output, stderr=output)
            subprocess.run([args.git, 'commit', '--message', args.message], stdout=output, stderr=output)

            if args.git_push:
                subprocess.run([args.git, 'push', 'origin', repo.default_branch], stdout=output, stderr=output)
            else:
                subprocess.run([args.git, 'push', '--set-upstream', 'origin', branch_name], stdout=output, stderr=output)
                subprocess.run([args.gh, 'pr', 'create', '--fill', '--repo', str(repo), '--head', branch_name], stdout=output, stderr=output)

def do_alerts(args):
    for repo in args.repos:
        for alert in repo.alerts():
            print(repo,
                  format(alert.number, '>4d'),
                  alert.created_at,
                  format(alert.state, '>9s'),
                  alert.rule.id,
                  '{}:{}'.format(alert.location.path, alert.location.start_line),
            )

def do_analyses(args):
    if args.delete:
        delete_queue = [ analysis for analysis in args.repo.analyses(ref=args.ref) if analysis.is_deletable() ]

        while True:
            try:
                this_analysis = delete_queue.pop()
            except IndexError:
                return # done -- all analyses have been deleted!

            next_analysis = this_analysis.delete()
            if next_analysis is not None:
                delete_queue.append(next_analysis)

            print(this_analysis.id)

    # The "delete" flag (args.delete) was not passed, so print analyses instead of deleting them.
    for analysis in args.repo.analyses(ref=args.ref):
        print(args.repo,
              format(analysis.id, '>9d'),
              analysis.created_at,
              analysis.analysis_key,
              format(analysis.rules_count, '>3d'),
              format(analysis.results_count, '4d'),
              'Y' if analysis.is_deletable() else 'N',
              analysis.sarif_id,
        )

def main():
    def get_parent_exe():
        """
        Get the parent process' argv[0], which is the name, and path if referenced using an absolute path, of the executable.
        """
        try:
            ps = subprocess.run(['ps', '-oargs=', '-p', str(os.getppid())], capture_output=True, check=True)
            return ps.stdout.decode('UTF-8').split()[0]
        except subprocess.CalledProcessError:
            return None

    # If executed with /path/to/gh, try to get /path/to/gh. Failing that, try to find `gh` in $PATH.
    gh_exe = get_parent_exe() or shutil.which('gh')
    if gh_exe is None:
        sys.exit('error: cannot find `gh` executable; please specify a path with `--gh`.')

    git_exe = shutil.which('git')
    if git_exe is None:
        sys.exit('error: cannot find `git` executable; please specify a path with `--git`.')
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--gh', metavar='path', default=gh_exe, help='path to the gh executable.')
    parser.add_argument('--git', metavar='path', default=git_exe, help='path to the git executable.')
    parser.add_argument('-v', '--verbose', action='store_true', help='print diagnostic information.')
    parser.set_defaults(func=lambda x: parser.print_help())
    subparsers = parser.add_subparsers()
    
    parser_enable = subparsers.add_parser('enable', help='set up Code Scanning with GitHub CodeQL.')
    parser_enable.add_argument('-f', '--force', action='store_true', help='overwrite existing workflow file.')
    parser_enable.add_argument('--git-push', action='store_true', help='do not create PR; push commit to HEAD of default branch.')
    parser_enable.add_argument('-m', '--message', default='Create CodeQL workflow file', help='specify the pull-request/commit message.')
    parser_enable.add_argument('repos', nargs='+', type=GithubRepository.with_kwargs(gh_exe=gh_exe, git_exe=git_exe))
    parser_enable.set_defaults(func=do_enable)
    
    parser_alerts = subparsers.add_parser('alerts', help='download code-scanning alerts.')
    parser_alerts.add_argument('repos', nargs='+', type=GithubRepository.with_kwargs(gh_exe=gh_exe, git_exe=git_exe))
    parser_alerts.set_defaults(func=do_alerts)

    parser_analyses = subparsers.add_parser('analyses', help='list code-scanning analyses.')
    parser_analyses.add_argument('-d', '--delete', action='store_true')
    parser_analyses.add_argument('-r', '--ref')
    parser_analyses.add_argument('repo', type=GithubRepository.with_kwargs(gh_exe=gh_exe, git_exe=git_exe))
    parser_analyses.set_defaults(func=do_analyses)
    
    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()
