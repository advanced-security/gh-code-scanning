#!/usr/bin/env python

import argparse
import os
import shutil
import string
import subprocess
import sys
import tempfile
import utils

def enable(args):
    with open(os.path.join(os.path.dirname(__file__), 'codeql-analysis.yml')) as f:
        workflow_template = string.Template(f.read())

    branch_name = 'mario-campos/gh-code-scanning'

    for nwo in args.repos:
        os.chdir('/')
        with tempfile.TemporaryDirectory('gh_code_scanning') as temp_dir:
            command = [args.gh, 'repo', 'clone', nwo, temp_dir, '--', '--depth=1']
            if not args.verbose:
                command.append('--quiet')
            subprocess.run(command)
            
            os.chdir(temp_dir)

            if os.path.exists('.github/workflows/codeql-analysis.yml') and not args.force:
                printf('error: ".github/workflows/codeql-analysis.yml" already exists; skipping...', file=sys.stderr)
                continue
            
            command = [args.git, 'checkout', '-b', branch_name]
            if not args.verbose:
                command.append('--quiet')
            subprocess.run(command)

            try:
                os.mkdir('.github')
                os.mkdir('.github/workflows')
            except FileExistsError as e:
                pass

            workflow_contents = workflow_template.safe_substitute(
                DEFAULT_BRANCH_EXPR=repr(utils.github.get_repo_default_branch(args.gh, nwo)),
                SCHEDULE_CRON_EXPR=repr(utils.actions.random_weekly_cron_expr()),
                MATRIX_LANGUAGE_EXPR=repr(list(utils.codeql.get_codeql_langs(args.gh, nwo)))
            )

            with open('.github/workflows/codeql-analysis.yml', 'w') as f:
                f.write(workflow_contents)
            
            subprocess.run([args.git, 'add', '--all'])
            
            command = [args.git, 'commit', '--message', 'Create .github/workflows/codeql-analysis.yml']
            if not args.verbose:
                command.append('--quiet')
            subprocess.run(command)
            
            command = [args.git, 'push', '--set-upstream', 'origin', branch_name]
            if not args.verbose:
                command.append('--quiet')
            subprocess.run(command)
            
            subprocess.run([args.gh, 'pr', 'create', '--fill', '--head', branch_name])

def alerts(args):
    for nwo in args.repos:
        try:
            alerts = utils.github.get_repo_cs_alerts(args.gh, nwo)
        except subprocess.CalledProcessError as e:
            print(f'error: {nwo}: {e.stderr}', file=sys.stderr)
            continue
        for alert in alerts:
            print(nwo,
                  format(alert['number'], '>4d'),
                  alert['created_at'],
                  alert['state'],
                  alert['rule']['id'],
                  '{}:{}'.format(alert['most_recent_instance']['location']['path'], alert['most_recent_instance']['location']['start_line'])
            )
            
def main():
    gh_exe = utils.misc.get_parent_exe() or shutil.which('gh')
    if gh_exe is None:
        printf('error: cannot find `gh` executable; please specify a path with `--gh`.', file=sys.stderr)
        exit(1)

    git_exe = shutil.which('git')
    if git_exe is None:
        print('error: cannot find `git` executable; please specify a path with `--git`.', file=sys.stderr)
        exit(1)
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--gh', metavar='path', default=gh_exe, help='path to the gh executable.')
    parser.add_argument('--git', metavar='path', default=git_exe, help='path to the git executable.')
    parser.add_argument('-v', '--verbose', action='store_true', help='print diagnostic information.')
    parser.set_defaults(func=lambda x: parser.print_help())
    subparsers = parser.add_subparsers()
    
    parser_enable = subparsers.add_parser('enable', help='set up Code Scanning with GitHub CodeQL.')
    parser_enable.add_argument('-f', '--force', action='store_true', help='overwrite existing workflow file.')
    parser_enable.add_argument('repos', nargs='+')
    parser_enable.set_defaults(func=enable)
    
    parser_alerts = subparsers.add_parser('alerts', help='download code-scanning alerts.')
    parser_alerts.add_argument('repos', nargs='+')
    parser_alerts.set_defaults(func=alerts)
    
    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()
