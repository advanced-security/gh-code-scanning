#!/usr/bin/env python

import argparse
import json
import os
import shutil
import subprocess
import tempfile

def json_multiloads(json_string, spool=[]):
    try:
        spool += json.loads(json_string)
    except json.decoder.JSONDecodeError as e:
        spool += json.loads(json_string[:e.pos])
        recursive_decode_json(json_string[e.pos:], spool)
    return spool

def get_parent_exe():
    ps = subprocess.run(['ps', '-oargs=', '-p', str(os.getppid())], capture_output=True)
    return ps.stdout.decode('UTF-8').split()[0]

def enable(args):
    branch_name = 'gh-code-scanning_{}/enable'.format(os.getpid())

    for nwo in args.repos:
        os.chdir('/')
        with tempfile.TemporaryDirectory('gh_code_scanning') as temp_dir:
            command = [args.gh, 'repo', 'clone', nwo, temp_dir, '--', '--depth=1']
            if not args.verbose:
                command.append('--quiet')
            subprocess.run(command)
            
            os.chdir(temp_dir)
            
            command = [args.git, 'checkout', '-b', branch_name]
            if not args.verbose:
                command.append('--quiet')
            subprocess.run(command)

            try:
                os.mkdir('.github')
                os.mkdir('.github/workflows')
            except FileExistsError as e:
                pass

            shutil.copy(os.path.join(os.path.dirname(__file__), 'codeql-analysis.yml'), '.github/workflows')
            
            command = [args.git, 'add', '--all']
            subprocess.run(command)
            
            command = [args.git, 'commit', '--message', 'Create .github/workflows/codeql-analysis.yml']
            if not args.verbose:
                command.append('--quiet')
            subprocess.run(command)
            
            command = [args.git, 'push', '--set-upstream', 'origin', branch_name]
            if not args.verbose:
                command.append('--quiet')
            subprocess.run(command)
            
            command = [args.gh, 'pr', 'create', '--fill', '--head', branch_name]
            subprocess.run(command)

def alerts(args):
    for nwo in args.repos:
        command = [args.gh, 'api', '--paginate', 'repos/{}/code-scanning/alerts'.format(nwo)]
        gh = subprocess.run(command, capture_output=True)
        for alert in json_multiloads(gh.stdout):
            print(nwo,
                  format(alert['number'], '>4d'),
                  alert['created_at'],
                  alert['state'],
                  alert['rule']['id'],
                  '{}:{}'.format(alert['most_recent_instance']['location']['path'], alert['most_recent_instance']['location']['start_line'])
            )
            
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--gh', metavar='path', default=get_parent_exe(), help='path to the gh executable.')
    parser.add_argument('--git', metavar='path', default=shutil.which('git'), help='path to the git executable.')
    parser.add_argument('-v', '--verbose', action='store_true', help='print diagnostic information.')
    parser.set_defaults(func=lambda x: parser.print_help())
    subparsers = parser.add_subparsers()
    
    parser_enable = subparsers.add_parser('enable', help='set up Code Scanning with GitHub CodeQL.')
    parser_enable.add_argument('-f', '--force', action='store_true', help='overwrite existing workflow file.')
    parser_enable.add_argument('repos', nargs='+')
    parser_enable.set_defaults(func=enable)
    
    parser_alerts = subparsers.add_parser('alerts', help='download code-scanning alerts.')
    parser_alerts.add_argument('repos', nargs='+')
    parser_alerts.set_defaults(func=alerts)
    
    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()
